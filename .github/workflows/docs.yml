name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - '**.md'
  workflow_dispatch:

jobs:
  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
      
      - name: Create markdownlint config
        run: |
          cat > .markdownlint.json << 'EOF'
          {
            "default": true,
            "line-length": {
              "line_length": 100,
              "code_blocks": false,
              "tables": false
            }
          }
          EOF
      
      - name: Check for markdown issues
        id: check_markdown
        run: |
          # Run markdownlint and save output
          markdownlint "**/*.md" --ignore node_modules --config .markdownlint.json > markdown_issues.txt || echo "Issues found"
          
          # Count issues
          issue_count=$(wc -l < markdown_issues.txt)
          echo "::set-output name=issue_count::$issue_count"
          
          if [ "$issue_count" -gt 0 ]; then
            cat markdown_issues.txt
            echo ""
            echo "::warning::$issue_count markdown issues found"
          else
            echo "No markdown issues found!"
          fi
          
      - name: Create Fix Script
        if: steps.check_markdown.outputs.issue_count > 0
        run: |
          cat > fix-markdown.sh << 'EOF'
          #!/bin/bash
          
          # Fix markdown formatting issues in all markdown files
          
          # Function to ensure blank lines around headings
          fix_headings() {
            file="$1"
            # Create a temporary file
            tmp_file=$(mktemp)
            
            # Process the file line by line
            awk '
              # Print blank line before heading if not already blank
              /^#/ && prev !~ /^$/ { print ""; }
              # Print the current line
              { print; prev = $0; }
              # Print blank line after heading if next line is not blank
              /^#/ && (getline next_line) > 0 {
                if (next_line !~ /^$/) print "";
                print next_line;
              }
            ' "$file" > "$tmp_file"
            
            # Replace original file with the fixed one
            mv "$tmp_file" "$file"
          }
          
          # Function to ensure blank lines around lists
          fix_lists() {
            file="$1"
            # Create a temporary file
            tmp_file=$(mktemp)
            
            # Process the file line by line
            awk '
              # Print blank line before list item if not already blank and previous line is not a list item
              /^[*-]|\d+\./ && prev !~ /^$/ && prev !~ /^[*-]|\d+\./ { print ""; }
              # Print the current line
              { print; prev = $0; }
              # Print blank line after list if next line is not blank and not a list item
              /^[*-]|\d+\./ && (getline next_line) > 0 {
                if (next_line !~ /^$/ && next_line !~ /^[*-]|\d+\./) print "";
                print next_line;
              }
            ' "$file" > "$tmp_file"
            
            # Replace original file with the fixed one
            mv "$tmp_file" "$file"
          }
          
          # Function to ensure blank lines around code blocks
          fix_code_blocks() {
            file="$1"
            # Create a temporary file
            tmp_file=$(mktemp)
            
            # Process the file line by line
            awk '
              # Print blank line before code block if not already blank
              /^```/ && prev !~ /^$/ { print ""; }
              # Print the current line
              { print; prev = $0; }
              # Print blank line after code block if next line is not blank
              /^```/ && (getline next_line) > 0 {
                if (next_line !~ /^$/) print "";
                print next_line;
              }
            ' "$file" > "$tmp_file"
            
            # Replace original file with the fixed one
            mv "$tmp_file" "$file"
          }
          
          # Function to ensure files end with a single newline
          fix_newlines() {
            file="$1"
            # Ensure the file ends with exactly one newline
            sed -i -e '$s/\n*$/\n/' "$file"
          }
          
          # Function to fix empty links
          fix_empty_links() {
            file="$1"
            # Replace empty links with placeholder text
            sed -i 's/\[\([^]]*\)\](#)/[\1](https:\/\/example.com)/' "$file"
          }
          
          # Main processing
          echo "Fixing markdown files..."
          
          find . -name "*.md" | while read -r file; do
            echo "Processing $file"
            
            # Apply fixes
            fix_headings "$file"
            fix_lists "$file"
            fix_code_blocks "$file"
            fix_newlines "$file"
            fix_empty_links "$file"
          done
          
          echo "Done! Some issues may still need to be manually fixed."
          EOF
          
          chmod +x fix-markdown.sh
          
      - name: Fix markdown issues
        if: steps.check_markdown.outputs.issue_count > 0
        run: |
          ./fix-markdown.sh
          
      - name: Recheck markdown issues
        if: steps.check_markdown.outputs.issue_count > 0
        run: |
          markdownlint "**/*.md" --ignore node_modules --config .markdownlint.json || echo "Some issues remain"
          
      - name: Validate documentation structure
        run: |
          if [ ! -d "docs" ]; then
            echo "::error::Documentation directory 'docs' is missing"
            exit 1
          fi
          
          # Check README.md, CHANGELOG.md, etc.
          for docfile in README.md CHANGELOG.md CONTRIBUTING.md; do
            if [ ! -f "$docfile" ]; then
              echo "::warning::Recommended documentation file $docfile is missing"
            fi
          done
          
          echo "âœ… Documentation structure validated"