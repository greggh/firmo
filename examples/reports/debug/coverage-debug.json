{"summary":{"execution_coverage_percent":10.526315789474,"file_coverage_percent":100.0,"total_files":1,"performance":{"max_call_time":0,"hook_calls":5057,"error_count":0,"average_call_time":0,"call_events":1326,"line_events":3703,"last_call_time":0,"execution_time":0,"return_events":0},"covered_blocks":0,"line_coverage_percent":10.526315789474,"covered_lines":6,"total_functions":0,"total_blocks":0,"executed_lines":6,"function_coverage_percent":0,"covered_files":1,"total_lines":57,"covered_functions":0,"block_coverage_percent":0},"files":{"examples/html_coverage_debug.lua":{"functions":[],"execution_coverage_percent":10.526315789474,"covered_lines":6,"line_coverage_percent":10.526315789474,"total_functions":0,"covered_blocks":0,"executed_lines_count":6,"source":"--[[\n  html_coverage_debug.lua\n  \n  Debugging version of the HTML coverage report to diagnose issues with \n  source code display in the HTML formatter.\n]]\n\nlocal lust = require(\"lust-next\")\nlocal describe, it, expect = lust.describe, lust.it, lust.expect\nlocal fs = require(\"lib.tools.filesystem\")\nlocal logging = require(\"lib.tools.logging\")\nlocal logger = logging.get_logger(\"Debug\")\nlocal error_handler = require(\"lib.tools.error_handler\")\n\n-- Enable debug logging\nlogging.configure_from_config(\"Debug\")\n\n-- Sample Calculator implementation to test\nlocal Calculator = {}\n\n-- This function will be covered (executed and validated)\nfunction Calculator.add(a, b)\n  if type(a) ~= \"number\" or type(b) ~= \"number\" then\n    return nil, \"Both arguments must be numbers\"\n  end\n  return a + b\nend\n\n-- This function will be executed but not validated\nfunction Calculator.subtract(a, b)\n  if type(a) ~= \"number\" or type(b) ~= \"number\" then\n    return nil, \"Both arguments must be numbers\"\n  end\n  return a - b\nend\n\n-- This function will not be executed at all\nfunction Calculator.multiply(a, b)\n  if type(a) ~= \"number\" or type(b) ~= \"number\" then\n    return nil, \"Both arguments must be numbers\"\n  end\n  return a * b\nend\n\n-- Initialize coverage\nlocal coverage = require(\"lib.coverage\")\ncoverage.init({\n  use_static_analysis = true,\n  pre_analyze_files = true,\n})\n\n-- Start coverage explicitly\nlocal current_file = debug.getinfo(1, \"S\").source:sub(2)\nprint(\"Current file:\", current_file)\n\ncoverage.start()\ncoverage.track_file(current_file)\n\n-- Run tests\ndescribe(\"HTML Coverage Debug\", function()\n  describe(\"add function\", function()\n    it(\"correctly adds two numbers\", function()\n      local result = Calculator.add(5, 3)\n      expect(result).to.equal(8)\n    end)\n    \n    it(\"returns error for non-numbers\", function()\n      local result, err = Calculator.add(\"5\", 3)\n      expect(result).to_not.exist()\n      expect(err).to.equal(\"Both arguments must be numbers\")\n    end)\n  end)\n  \n  describe(\"subtract function\", function()\n    it(\"executes subtraction without validation\", function()\n      local result = Calculator.subtract(10, 4)\n      -- No assertion to validate the result\n    end)\n  end)\n  \n  -- No tests for multiply, so it won't be executed at all\nend)\n\n-- Stop coverage\ncoverage.stop()\n\n-- Get coverage data\nlocal report_data = coverage.get_report_data()\n\n-- Print detailed report data for debugging\nprint(\"Report Data Summary:\")\nprint(\"  Total files:\", report_data.summary.total_files)\nprint(\"  Covered files:\", report_data.summary.covered_files)\nprint(\"  Total lines:\", report_data.summary.total_lines)\nprint(\"  Covered lines:\", report_data.summary.covered_lines)\nprint(\"  Executed lines:\", report_data.summary.executed_lines)\nprint(\"  Coverage %:\", report_data.summary.line_coverage_percent)\n\nprint(\"\\nFiles in coverage data:\")\nfor file_path, file_data in pairs(report_data.files) do\n  print(\"  File:\", file_path)\n  print(\"    Lines:\", file_data.total_lines or 0, \n               \"Covered:\", file_data.covered_lines or 0,\n               \"Executed:\", file_data.executed_lines_count or 0)\n               \n  -- Check if source code is present\n  print(\"    Source code available:\", file_data.source ~= nil and #file_data.source > 0)\n  \n  -- Count the execution & coverage data\n  local line_count = 0\n  if file_data.lines then\n    for line_num, _ in pairs(file_data.lines) do\n      line_count = line_count + 1\n    end\n  end\n  print(\"    Line data entries:\", line_count)\n  \n  -- Add original content to file_data\n  if not file_data.source or #file_data.source == 0 then\n    local file_success, file_content = error_handler.safe_io_operation(\n      function() return fs.read_file(file_path) end,\n      file_path,\n      {operation = \"read_file_for_debug\"}\n    )\n    \n    if file_success and file_content then\n      print(\"    Reading file content manually\")\n      file_data.source = file_content\n    end\n  end\nend\n\n-- Generate HTML report\nlocal reporting = require(\"lib.reporting\")\nlocal html_report = reporting.format_coverage(report_data, \"html\")\n\n-- Create a debug directory to save the HTML file\nlocal debug_dir = \"examples/reports/debug\"\nfs.ensure_directory_exists(debug_dir)\n\n-- Write the report\nlocal html_path = fs.join_paths(debug_dir, \"coverage-debug.html\")\nfs.write_file(html_path, html_report)\n\n-- Also save the raw coverage data for inspection\nlocal json = require(\"lib.reporting.json\")\nlocal json_data = json.encode(report_data)\nlocal json_path = fs.join_paths(debug_dir, \"coverage-debug.json\")\nfs.write_file(json_path, json_data)\n\nprint(\"\\nDebug files saved:\")\nprint(\"  HTML report:\", html_path)\nprint(\"  Raw JSON data:\", json_path)\nprint(\"\\nPlease check these files to diagnose the source code display issue.\")","covered_functions":0,"total_blocks":0,"executed_lines":[],"lines":{6:{"executed":false,"covered":false,"executable":true,"source":"]]"},8:{"executed":false,"covered":false,"executable":true,"source":"local describe, it, expect = lust.describe, lust.it, lust.expect"},9:{"executed":false,"covered":false,"executable":true,"source":"local fs = require(\"lib.tools.filesystem\")"},10:{"executed":false,"covered":false,"executable":true,"source":"local logging = require(\"lib.tools.logging\")"},11:{"executed":false,"covered":false,"executable":true,"source":"local logger = logging.get_logger(\"Debug\")"},12:{"executed":false,"covered":false,"executable":true,"source":"local error_handler = require(\"lib.tools.error_handler\")"},16:{"executed":false,"covered":false,"executable":true,"source":"local Calculator = {}"},19:{"executed":false,"covered":false,"executable":true,"source":"  if type(a) ~= \"number\" or type(b) ~= \"number\" then"},23:{"executed":false,"covered":false,"executable":true,"source":"end"},26:{"executed":false,"covered":false,"executable":true,"source":"  if type(a) ~= \"number\" or type(b) ~= \"number\" then"},32:{"executed":true,"covered":true,"executable":true,"source":"function Calculator.multiply(a, b)"},34:{"executed":false,"covered":false,"executable":true,"source":"    return nil, \"Both arguments must be numbers\""},39:{"executed":false,"covered":false,"executable":true,"source":"local coverage = require(\"lib.coverage\")"},40:{"executed":false,"covered":false,"executable":true,"source":"coverage.init({"},42:{"executed":false,"covered":false,"executable":true,"source":"  pre_analyze_files = true,"},46:{"executed":false,"covered":false,"executable":true,"source":"print(\"Current file:\", current_file)"},47:{"executed":false,"covered":false,"executable":true,"source":"coverage.start()"},48:{"executed":false,"covered":false,"executable":true,"source":"coverage.track_file(current_file)"},50:{"executed":true,"covered":true,"executable":true,"source":"describe(\"HTML Coverage Debug\", function()"},53:{"executed":false,"covered":false,"executable":true,"source":"      local result = Calculator.add(5, 3)"},54:{"executed":false,"covered":false,"executable":true,"source":"      expect(result).to.equal(8)"},57:{"executed":true,"covered":true,"executable":true,"source":"    it(\"returns error for non-numbers\", function()"},60:{"executed":false,"covered":false,"executable":true,"source":"      expect(err).to.equal(\"Both arguments must be numbers\")"},61:{"executed":false,"covered":false,"executable":true,"source":"    end)"},62:{"executed":false,"covered":false,"executable":true,"source":"  end)"},64:{"executed":true,"covered":true,"executable":true,"source":"  describe(\"subtract function\", function()"},65:{"executed":true,"covered":true,"executable":true,"source":"    it(\"executes subtraction without validation\", function()"},68:{"executed":false,"covered":false,"executable":true,"source":"    end)"},69:{"executed":false,"covered":false,"executable":true,"source":"  end)"},72:{"executed":false,"covered":false,"executable":true,"source":"end)"},74:{"executed":false,"covered":false,"executable":true,"source":"coverage.stop()"},76:{"executed":false,"covered":false,"executable":true,"source":"local report_data = coverage.get_report_data()"},78:{"executed":false,"covered":false,"executable":true,"source":"print(\"Report Data Summary:\")"},79:{"executed":false,"covered":false,"executable":true,"source":"print(\"  Total files:\", report_data.summary.total_files)"},82:{"executed":false,"covered":false,"executable":true,"source":"print(\"  Covered lines:\", report_data.summary.covered_lines)"},85:{"executed":false,"covered":false,"executable":true,"source":"print(\"\\nFiles in coverage data:\")"},88:{"executed":false,"covered":false,"executable":true,"source":"  print(\"    Lines:\", file_data.total_lines or 0, "},93:{"executed":false,"covered":false,"executable":true,"source":"  print(\"    Source code available:\", file_data.source ~= nil and #file_data.source > 0)"},96:{"executed":false,"covered":false,"executable":true,"source":"  local line_count = 0"},97:{"executed":false,"covered":false,"executable":true,"source":"  if file_data.lines then"},99:{"executed":false,"covered":false,"executable":true,"source":"      line_count = line_count + 1"},100:{"executed":false,"covered":false,"executable":true,"source":"    end"},101:{"executed":false,"covered":false,"executable":true,"source":"  end"},102:{"executed":false,"covered":false,"executable":true,"source":"  print(\"    Line data entries:\", line_count)"},107:{"executed":true,"covered":true,"executable":true,"source":"      function() return fs.read_file(file_path) end,"},110:{"executed":false,"covered":false,"executable":true,"source":"    )"},112:{"executed":false,"covered":false,"executable":true,"source":"    if file_success and file_content then"},113:{"executed":false,"covered":false,"executable":true,"source":"      print(\"    Reading file content manually\")"},116:{"executed":false,"covered":false,"executable":true,"source":"  end"},119:{"executed":false,"covered":false,"executable":true,"source":"local reporting = require(\"lib.reporting\")"},120:{"executed":false,"covered":false,"executable":true,"source":"local html_report = reporting.format_coverage(report_data, \"html\")"},122:{"executed":false,"covered":false,"executable":true,"source":"local debug_dir = \"examples/reports/debug\""},123:{"executed":false,"covered":false,"executable":true,"source":"fs.ensure_directory_exists(debug_dir)"},126:{"executed":false,"covered":false,"executable":true,"source":"fs.write_file(html_path, html_report)"},128:{"executed":false,"covered":false,"executable":true,"source":"local json = require(\"lib.reporting.json\")"},134:{"executed":false,"covered":false,"executable":true,"source":"print(\"  Raw JSON data:\", json_path)"},135:{"executed":false,"covered":false,"executable":true,"source":"print(\"\\nPlease check these files to diagnose the source code display issue.\")"}},"function_coverage_percent":0,"total_lines":57,"blocks":[],"block_coverage_percent":0}}}