Diagnostics

NEVER remove diagnostic disable comments from the codebase, unless you've removed the code they apply to. These comments are intentionally placed to suppress specific warnings while we work on fixing the underlying issues. Be particularly aware that diagnostics like `unused-local` (common with `pcall` and `error_handler.try`), `need-check-nil` (in controlled contexts where nil is handled or known not to occur), and `redundant-parameter` (often due to module re-exports obscuring the original signature) are frequently suppressed as part of established, intentional coding patterns. Refer to CLAUDE.md (lines 242-291) for specific pattern details. Removing these suppressions without understanding the context can introduce unnecessary static analysis noise.


JSDoc

In the firmo project we use JSDoc to document complete files and each function in those files. When adding, removing or editing functionality in a file, all relevant JSDoc must be updated or created. Adhere to the comprehensive JSDoc guidelines detailed in CLAUDE.md, which cover required annotation locations (including module interfaces with `---@class`), formatting standards, common patterns (like error returns, optional parameters), and annotation priorities.


testing

### Testing Commands

**NEVER RUN ALL TESTS AT ONCE** (e.g., using `lua firmo.lua tests/`). This policy is in place to encourage targeted testing and prevent excessively long test runs during development. The conflicting example command has been removed from CLAUDE.md to maintain consistency.

- Run Specific Test: `lua firmo.lua tests/reporting_test.lua`
- Run Tests by Pattern: `lua firmo.lua --pattern=coverage tests/`
- Run Tests with Coverage: `lua firmo.lua --coverage tests/`
- Run Tests with Watch Mode: `lua firmo.lua --watch tests/`
- Run Tests with Quality Validation: `lua firmo.lua --quality tests/`
- Run Example: `lua examples/report_example.lua`


firmo assertions

In the firmo projects test files:

firmo uses expect-style assertions rather than assert-style assertions:

-- CORRECT: firmo expect-style assertions
expect(value).to.exist()
expect(actual).to.equal(expected) -- IMPORTANT: Note argument order (actual, then expected)
expect(value).to.be.a("string")
expect(value).to.be_truthy()
expect(value).to.match("pattern")
expect(fn).to.fail()

-- INCORRECT: busted-style assert assertions (don't use these)
assert.is_not_nil(value)         -- wrong
assert.equals(expected, actual)  -- wrong (and reversed args)
assert.type_of(value, "string")  -- wrong
assert.is_true(value)            -- wrong

For detailed guidance, including a mapping from busted-style assertions, common mistakes (like negation syntax `to_not` vs `not_to`, member access `to.be` vs `to_be`), a comprehensive list of extended assertions, and reinforcement of the `expect(actual).to.equal(expected)` argument order, refer to CLAUDE.md.


No special case

NEVER ADD SPECIAL CASE CODE FOR SPECIFIC FILES OR SPECIFIC SITUATIONS IN CORE / NON-TEST CODE. This includes avoiding conditional logic based on specific file names (e.g., `calculator.lua`), path patterns (e.g., `samples/`), or other unique identifiers. Refer to CLAUDE.md for explicit examples of banned patterns. Always implement general solutions that work consistently across all inputs.


Central config

In the firmo project, always use the central_config system for configuration/settings, documented here: docs/guides/central_config.md. Adherence to this rule explicitly includes *never hardcoding file paths, patterns, or other settings* that should reasonably be managed via configuration. Use configuration values derived from `central_config.get_config()` instead. Refer to examples in CLAUDE.md.


Documenting Major Changes

For significant refactoring, large features, or complex fixes, create a dedicAated plan document within docs/firmo/, outlining goals, approach, decisions, and progress, following existing precedents like docs/firmo/plan.md.


Documentation Accuracy for Partial Features

Maintain accuracy in documentation regarding partially implemented features. Ensure Guides, API docs, and docs/firmo/architecture.md clearly state the current implementation status, distinguishing between functional, planned, and incomplete aspects.


Coverage Fix Procedure

When fixing coverage issues: Adhere strictly to the procedure in CLAUDE.md. Prioritize identifying the fundamental problem, implementing a SINGLE general solution at the appropriate boundary (e.g., normalization), removing ALL special-case code, and testing broadly.


Temporary File Management in Tests

ALWAYS use the integrated temporary file system for test resources (temp_file.create_with_content, test_helper.create_temp_test_directory, test_helper.with_temp_test_directory, test_helper.register_temp_file). Rely on automatic cleanup. NEVER manually create/remove temporary files using io.* or os.* in tests. ALWAYS check errors from temp file functions.


Error Testing Pattern

Standard pattern for testing errors: 1. Add the { expect_error = true } flag to the it block options. 2. Wrap the code expected to error within test_helper.with_error_capture(). 3. Assert on the returned err object using flexible checks (e.g., expect(err).to.exist(), expect(err.message).to.match('pattern')). Avoid overly specific checks like expect(err.category).to.equal(...) unless essential. Refer to CLAUDE.md for details.


Test Function Usage

In test files: NEVER call firmo.run() or firmo(). Tests must ONLY be executed via the standard test.lua runner script.


Markdown Formatting

When editing Markdown files: 1. Use simple triple backticks () for code blocks. Do not add language specifiers unless necessary for specific syntax highlighting. NEVER use text. 2. Ensure all backticks are balanced (equal numbers of opening and closing backticks).


firmo plans

**Consult & Update Project Docs:** Project plan (docs/firmo/plan.md), main info (CLAUDE.md) and architecture (docs/firmo/architecture.md) MUST be consulted at the start of a work session in `/home/gregg/Projects/lua-library/firmo`. These documents MUST be updated when major changes are implemented that are either required because they are new code or because they make something in these documents now incorrect or outdated..


knowledge.md files

**Read & Update knowledge.md**: If a knowledge.md file exists in a directory where you read or edit files, you MUST read its contents first. If code changes in that directory render the knowledge.md inaccurate, you MUST update it.


default config

**Firmo Default Config:** The default configuration file for the firmo project is `.firmo-config.lua`.


Never claim executed successfully

Verify file execution after edits: If you edit a file to fix an error, you MUST run the file to confirm the fix worked. Only report success after successful execution.


Coverage in tests

In the firmo project, never add the coverage module into a test, coverage is handled by the runner.lua and the coverage module is used there. Tests should never need to access the coverage module directly unless they are specifically testing the coverage module.


Normalize

In the firmo project, normalize data structures at boundaries: Ensure ALL data is in a consistent format at key boundaries.


Use proper polymorphism

If different behaviors are needed, use proper abstraction and polymorphism, not conditional checks.


single responsibility

In the firmo project use Single responsibility: Each component should have a single responsibility and handle ALL inputs consistently.


table unpacking

In Lua projects. Table Unpacking: Always use the compatibility function for unpacking:
   local unpack_table = table.unpack or unpack


table length

In Lua projects. Table Length: Use the `#` operator instead of `table.getn`:

   local length = #my_table  -- Correct
   local length = table.getn(my_table)  -- Incorrect, deprecated


import test functions

In the firmo project, in test files:

- Import test functions correctly: `local describe, it, expect = firmo.describe, firmo.it, firmo.expect`
- For test lifecycle, use: `local before, after = firmo.before, firmo.after`


modules

In the firmo project, when using a module like the filesystem module, temp file module, test helper, or any others remember to actually read the module file before you use it in a file edit or creation. Never assume you know the name of functions in one of the projects modules, always read that module file to learn how to use it.


debug hook

In the firmo project we are building a debug hook coverage implementation.


